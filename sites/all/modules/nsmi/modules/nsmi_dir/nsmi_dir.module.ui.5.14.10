<?php

/**
 * @file nsmi_dir.module
 * Display Yahoo like directory
 */

/**
 * Implementation of hook_init().
 */
function nsmi_dir_init() {
  drupal_add_css(drupal_get_path('module', 'nsmi_dir') .'/nsmi_dir.css');
}

/**
 * Implementation of hook_menu().
 */
function nsmi_dir_menu() {
  $items = array();

  $items['dir'] = array(
    'title' => 'Directory',
    'description' => 'Yahoo like directory.',
    'page callback' => 'nsmi_dir_directory',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  
  $items['admin/settings/nsmi/dir'] = array(
    'title' => 'Directory',
    'description' => 'Direcotry for NSMI vocabulary.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nsmi_dir_admin'),
    'access arguments' => array('administer nsmi'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}

function nsmi_dir_admin($form_state) {
  $form['nsmi_dir_show_empty_term'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show directory terms even if they have no contents.'),
    '#default_value' => variable_get('nsmi_dir_show_empty_term', 0),
  );

  $form['nsmi_dir_show_counter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show article counts in the directory.'),
    '#default_value' => variable_get('nsmi_dir_show_counter', 0),
  );
  
  $form['nsmi_dir_show_noposts'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show message: "There are currently no posts in this category".'),
    '#default_value' => variable_get('nsmi_dir_show_noposts', 1),
  );
  
  $form['nsmi_dir_show_otherlang'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show message: "There may be articles in other language translations that you do not see here".'),
    '#default_value' => variable_get('nsmi_dir_show_otherlang', 1),
  );

  $vid = variable_get('nsmi_associated_vid', 0);
  $voc = taxonomy_vocabulary_load($vid);
  $nsmi_types = array();
  $node_types = node_get_types('names');
  
  foreach ($voc->nodes as $type) {
    $type = check_plain($type);
    $nsmi_types[] = $type;
    $hide_types[$type] = check_plain($node_types[$type]);
  }

  $form['nsmi_dir_ct_hide'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types to exclude from directory'),
    '#default_value' => variable_get('nsmi_dir_ct_hide', array()),
    '#options' => $hide_types,
    '#description' => t('Check content types that should not appear in the directory.'),
  );

  $form['nsmi_dir_node_list_style'] = array(
    '#type' => 'select',
    '#title' => t('Library list style'),
    '#default_value' => variable_get('nsmi_dir_node_list_style', 'default'),
    '#options' => array('default' => t('Default'), 'tabs' => t('Tabs')),
    '#description' => t('Default list is paged. Others are not. Non-default list requires jQuery UI module.'),
  );

  if (variable_get('nsmi_dir_node_list_style', 'default') == 'tabs' and $vid) {
    $form['nsmi_dir_tabs_style_order'] = array(
      '#type' => 'textfield',
      '#title' => t('Tabs list order'),
      '#default_value' => variable_get('nsmi_dir_tabs_style_order', ''),
      '#description' => t('List comma separated from this list:') . ' ' . implode(',', $nsmi_types),
    );
    
    $form['nsmi_dir_tabs_style_order_default'] = array(
      '#type' => 'value',
      '#value' => $nsmi_types,
    );
  }
  
  return system_settings_form($form);
}

function nsmi_dir_admin_validate($form, &$form_state) {
  if ($types = $form_state['values']['nsmi_dir_tabs_style_order_default']) {
    if ($form_state['values']['nsmi_dir_tabs_style_order']) {
      $order = preg_split('/[\s,]+/', $form_state['values']['nsmi_dir_tabs_style_order']);
    }
    else {
      $order = array();
    }
    
    $diff = array_diff($order, $types);
    
    if ($diff) {
      form_set_error('nsmi_dir_tabs_style_order', 'List is not correct.');
    }
  }
}

function nsmi_dir_directory() {
  return theme('nsmi_dir_directory');
}

function nsmi_dir_get_tid_url($dir) {
  array_shift($dir);
  $tid = array_shift($dir);
  return $tid;
}

function nsmi_dir_get_stats($tid, $node_count_only = FALSE) {
  global $user, $desc;
  static $node_grants;
  
  $desc = array($tid);

  if ($node_grants === NULL) {
    $node_grants = module_invoke_all('node_grants', $user, 'view');
  }
  
  if (!$node_count_only) {
    $children_count = nsmi_dir_get_children_count($tid);
    $children_count = $children_count ? $children_count : '-';
  }

  $lang = "n.language IN ('', '" . $GLOBALS['language']->language . "')";

  // Are there content types to not show in the directory?
  if ($nsmi_dir_ct_hide = array_filter(variable_get('nsmi_dir_ct_hide', array()))) {
    $nsmi_dir_ct_hide = implode("','", $nsmi_dir_ct_hide);
    $nsmi_dir_ct_hide = "AND n.type NOT IN ('{$nsmi_dir_ct_hide}')";
  }
  else {
    $nsmi_dir_ct_hide = '';
  }
    
  if ($node_grants) {
    // Code borrowed from node_access().
    $grants = array();
    foreach (node_access_grants('view', $user) as $realm => $gids) {
      foreach ($gids as $gid) {
        $grants[] = "(gid = $gid AND realm = '$realm')";
      }
    }

    $grants_sql = '';
    if (count($grants)) {
      $grants_sql = 'AND ('. implode(' OR ', $grants) .')';
    }

    $node_count = db_result(db_query("SELECT COUNT(*) FROM {term_data} d INNER JOIN {term_node} tn ON d.tid = tn.tid INNER JOIN {node_access} na ON tn.nid = na.nid INNER JOIN {node} n ON na.nid = n.nid WHERE $lang $nsmi_dir_ct_hide AND d.vid = %d AND d.tid IN (%s) $grants_sql AND grant_view >= 1 AND n.status <> 0", variable_get('nsmi_associated_vid', 0), implode(',', $desc)));
    
  }
  else {
    $node_count = db_result(db_query('SELECT COUNT(*) FROM {term_data} d INNER JOIN {term_node} tn ON d.tid = tn.tid INNER JOIN {node} n ON na.nid = n.nid WHERE $lang $nsmi_dir_ct_hide AND d.vid = %d AND d.tid IN (%s) AND n.status <> 0', variable_get('nsmi_associated_vid', 0), implode(',', $desc)));
  }
  $node_count = $node_count ? $node_count : '-';
  
  if ($node_count_only) {
    return "$node_count";
  }
  else {
    return "$children_count , $node_count";
  }
}

function nsmi_dir_get_children_count($tid) {
  global $desc;
  $desc[] = $tid;
  
  $children = taxonomy_get_children($tid);

  foreach ($children as $term) {
    $desc[] = $term->tid;
    $children += taxonomy_get_children($term->tid);
  }
  
  if ($tids = array_keys($children)) {
    $count = db_result(db_query('SELECT COUNT(DISTINCT tid) FROM {term_node} WHERE tid IN (' . implode(',', $tids) . ')'));
  }
  else {
    $count = 0;
  }
  
  return $count;
}

/**
 * Implementation of hook_theme().
 */
function nsmi_dir_theme() {
  return array(
    'nsmi_dir_directory' => array(
      'arguments' => array()
    ),
    'nsmi_dir_children' => array(
      'arguments' => array('tid' => 0, 'vid' => 0)
    ),
    'nsmi_dir_language_notice' => array(
      'arguments' => array('tid' => 0)
    ),
    'nsmi_dir_term_nodes' => array(
      'arguments' => array('tid' => 0, 'depth' => 0)
    ),
    'nsmi_dir_render_nodes_default' => array(
      'arguments' => array('result' => NULL)
    ),
    'nsmi_dir_render_nodes_tabs' => array(
      'arguments' => array('result' => NULL)
    ),
    'nsmi_dir_term_synonyms' => array(
      'arguments' => array('tid' => 0)
    ),
    'nsmi_dir_bctitle' => array(
      'arguments' => array('bc' => array(), 'class' => NULL)
    ),
  );
}

function theme_nsmi_dir_directory() {
  $alias = ucwords(str_replace("_"," ",variable_get('nsmi_alias_top', '')));
  drupal_set_title(t($alias));

  $dir = explode('/', $_GET['q']);
  $vid = variable_get('nsmi_associated_vid', 0);
  
  $tid = nsmi_dir_get_tid_url($dir);
  if (variable_get('nsmi_dir_show_counter', 0)) {
    $out = t('Terms are listed followed by numbers in the form of (sub-terms, articles)');
  }
  $out .= theme('nsmi_dir_children', (int)$tid, $vid);
  $out .= theme('nsmi_dir_term_synonyms', (int)$tid);
  $out .= '<div style="clear:both;"></div>';
  $out .= theme('nsmi_dir_language_notice', (int)$tid);
  $out .= '<div style="clear:both;"></div>';
  $out .= theme('nsmi_dir_term_nodes', (int)$tid);
  $out .= '<div style="clear:both;"></div>';
  
  return $out;
}

function theme_nsmi_dir_children($tid, $vid) {
  $terms = taxonomy_get_children($tid, $vid);

  foreach ($terms as $term) {
    $child_count = nsmi_dir_get_stats($term->tid);
    if (substr($child_count, -1) != '-' or variable_get('nsmi_dir_show_empty_term', 0)) {
      $item = l(nsmi_dir_tt($term), "dir/$term->tid");
      
      if (variable_get('nsmi_dir_show_counter', 0)) {
        $item .= ' <span class="nsmi-parentheses">(' . $child_count . ')</span>';
      }
      
      $list[] = $item;
    }
  }
  
  if ($list) {
    if (($count = count($list)) > 5) {
      $count = ceil($count / 2);
      for ($i = 0; $i < $count; $i++) {
        $half[] = array_shift($list);
      }
      $out = '<div class="nsmi-children-half">' . theme('item_list', $half) . '</div>';
      
      $out .= '<div class="nsmi-children-half">' . theme('item_list', $list) . '</div>';
    }
    else {
      $out = theme('item_list', $list);
    }
    $out = '<div class="nsmi-children-container">' . $out . '</div>';
  }
  else {
    $out = '';
  }
  
  return $out;
}

function theme_nsmi_dir_term_synonyms($tid) {
  $synonyms = taxonomy_get_synonyms($tid);
  
  foreach ($synonyms as $s) {
    if (is_numeric($s)) {
      $syn = $s;
      break;
    }
  }
  if ($syn) {
    $result = db_query("SELECT ts.tid FROM {term_synonym} ts JOIN {term_data} t ON ts.tid = t.tid AND t.vid = %d WHERE ts.name = '%s' AND ts.tid <> %d" , variable_get('nsmi_associated_vid', 0), $syn, $tid);

    while ($term = db_fetch_object($result)) {
      $current = taxonomy_get_term($term->tid);
      $breadcrumb = array(l(nsmi_dir_tt($current), 'dir/'. $current->tid) . ' (' . nsmi_dir_get_stats($current->tid) . ')');
      while ($parents = taxonomy_get_parents($current->tid)) {
        $current = array_shift($parents);
        $breadcrumb[] = l(nsmi_dir_tt($current), 'dir/'. $current->tid);
      }
      $breadcrumb[] = l(t('Top'), 'dir');
      $breadcrumb = array_reverse($breadcrumb);

      $list[] = theme('nsmi_dir_bctitle', $breadcrumb);
    }
    if ($list) {
      $see_also = theme('item_list', $list);
    }
  }
  
  $list = array();
  foreach ($synonyms as $s) {
    if (!is_numeric($s)) {
      $list[] = t($s);
    }
  }
  if ($list) {
    $synonym = theme('item_list', $list);
  }
  
  if ($see_also or $synonym) {
    $out = '<div class="nsmi-synonyms-container">';
    $out .= $see_also ? '<strong>'. t('See also') .':</strong><br />' . $see_also : '';
    $out .= $synonym ? '<strong>'. t('Synonyms') .':</strong><br />' . $synonym : '';
    $out .= '</div>';
    return  $out;
  }
  else {
    return '';
  }
}

function theme_nsmi_dir_language_notice($tid) {
  // TODO: Use $tid to determine how many articles are available for other languages. Too complicated to implement or overkill?
  
  if (module_exists('locale') and variable_get('nsmi_dir_show_otherlang', 0)) {
    $languages = language_list('enabled');
    if (isset($languages[1]) and count($languages[1]) > 1) {
      return t('There may be articles in other language translations that you do not see here.');
    }
  }
  
  return '';
}

// Code borrowed from taxonomy_term_page()
function theme_nsmi_dir_term_nodes($tid) {
  if ($tid) {
    $term = db_fetch_object(db_query(db_rewrite_sql('SELECT t.tid, t.name FROM {term_data} t WHERE t.tid = %d', 't', 'tid'), $tid));

    if ($term->name) {
      $title[] = nsmi_dir_tt($term);   // get term name to use as title
      
      $current = taxonomy_get_term($tid);            // get current taxonomy term
      
      // Build breadcrumb based on first hierarchy of first term:
      $breadcrumb = drupal_get_breadcrumb();            // get original breadcrumb
      // get alias and format
      $alias = ucwords(str_replace("_"," ",variable_get('nsmi_alias_top', '')));
      
      $breadcrumb[] = l(t($alias), variable_get('nsmi_alias_top', '')); // Add directory link to breadcrumb
      
      $hierarchy = array();
      
      while ($parents = taxonomy_get_parents($current->tid)) {  // create array of parent items
        $current = array_shift($parents);
        $hierarchy[] = l(nsmi_dir_tt($current), 'dir/'. $current->tid);
      }

      $hierarchy = array_reverse($hierarchy);          // reverse parent items array
      $breadcrumb = array_merge($breadcrumb, $hierarchy);    // merge breadcrumb with parent items
      drupal_set_breadcrumb($breadcrumb);            // set new breadcrumb

      $active_trail = menu_get_active_trail();        // get the current active trail
      $active_trail[1][title] = $title[0];          // set the title for the Directory to current item title
      menu_set_active_trail($active_trail);          // set the new active trail


      drupal_set_title(theme('nsmi_dir_bctitle', $title, 'bctitle'));

      // Determine list style
      // Default style will have pager
      $list_style = variable_get('nsmi_dir_node_list_style', 'default');
      
      switch ($list_style) {
      case 'tabs':
        $pager = FALSE;
        break;
      default:
        $pager = TRUE;
      }
      
      $output = nsmi_dir_render_nodes(nsmi_dir_taxonomy_select_nodes($tid, $pager), $list_style);

      return $output;

      break;
    }
    else {
      return NULL;
    }
  }
}

// Code borrowed from taxonomy_select_nodes() and trimmed all unnecessary lines.
function nsmi_dir_taxonomy_select_nodes($tid, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC') {
  $lang = "n.language IN ('', '" . $GLOBALS['language']->language . "')";

  // Are there content types to not show in the directory?
  if ($nsmi_dir_ct_hide = array_filter(variable_get('nsmi_dir_ct_hide', array()))) {
    $nsmi_dir_ct_hide = implode("','", $nsmi_dir_ct_hide);
    $nsmi_dir_ct_hide = "AND n.type NOT IN ('{$nsmi_dir_ct_hide}')";
  }
  else {
    $nsmi_dir_ct_hide = '';
  }

  if ($tid) {
    $sql = "SELECT DISTINCT(n.nid), n.type, n.sticky, n.title, n.created, r.teaser FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE $lang $nsmi_dir_ct_hide AND tn.tid = %d AND n.status = 1 ORDER BY $order";
    $sql_count = "SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE $lang $nsmi_dir_ct_hide AND tn.tid = %d AND n.status = 1";

    $sql = db_rewrite_sql($sql);
    $sql_count = db_rewrite_sql($sql_count);
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $tid);
    }
    else {
      $result = db_query($sql, $tid);
    }
  }

  return $result;
}

function nsmi_dir_render_nodes($result, $list_style = 'default') {
  return theme('nsmi_dir_render_nodes_' . $list_style, $result);
}

function theme_nsmi_dir_render_nodes_default($result) {
  $output = '';

  while ($node = db_fetch_object($result)) {
    $output .= '<h2 class="nsmi_node-teaser-title"><a href="' . url('node/'. $node->nid) . '">' . $node->title . '</a></h2>';
    
    $teaser = check_markup(truncate_utf8(strip_tags($node->teaser), 250, TRUE, TRUE));
    $output .= '<div class="content clear-block nsmi-node-teaser">' . $teaser . '</div>';
  }
  
  if ($output) {
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10), 0);
  }
  else {
	  if (variable_get('nsmi_dir_show_noposts', 0)) {
    		$output = '<p>'. t('There are currently no posts in this category.') .'</p>';
	  }
  }
  
  return $output;
}

function theme_nsmi_dir_render_nodes_tabs($result) {
  if (!module_exists('jquery_ui')) {
    drupal_set_message(t('jQuery UI module should be installed to use tabs list style.'), 'error');
    
    return theme('nsmi_dir_render_nodes_default', $result);
  }
  
  jquery_ui_add('ui.tabs');
  drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/default/ui.all.css');
  
  $js = "
    $(function() {
      $('#nsmi-library-tabs').tabs();
    });
  ";
  drupal_add_js($js, 'inline');

  $coll = array();

  if ($order = variable_get('nsmi_dir_tabs_style_order', '')) {
    $order = preg_split('/[\s,]+/', $order);

    foreach ($order as $o) {
      $coll[$o] = array();
    }
  }

  while ($node = db_fetch_object($result)) {
    $node_teaser = "\n" . '<h2 class="nsmi_node-teaser-title"><a href="' . url('node/'. $node->nid) . '">' . $node->title . '</a></h2>';
    
    $teaser = check_markup(truncate_utf8(strip_tags($node->teaser), 250, TRUE, TRUE));
    $node_teaser .= '<div class="content clear-block nsmi-node-teaser">' . $teaser . '</div>';
    
    $coll[$node->type][] = $node_teaser;
  }
  
  $coll = array_filter($coll); // Clean up empty subarrays.
  
  if ($coll) {
    $tabs .= "\n<ul>";
    
    foreach ($coll as $type => $teasers) {
      $tabs .= "\n<li><a href=\"#tabs-{$type}\">" . t(node_get_types('name', $type)) . "</a></li>";
      
      $tab_content .= "<div id=\"tabs-{$type}\">";
      
      foreach ($teasers as $teaser) {
        $tab_content .= $teaser;
      }
      
      $tab_content .= "</div>\n";
    }
    
    $tabs .= "</ul>\n";
    
    $output = '<div id="nsmi-library-tabs">' . $tabs . $tab_content . '</div>';
  }
  else {
	  if (variable_get('nsmi_dir_show_noposts', 0)) {
		$output = '<p>'. t('There are currently no posts in this category.') .'</p>';
	  }
  }
  
  return $output;
}

function theme_nsmi_dir_bctitle($bc, $class = NULL) {
  if ($class)  {
    return "<span class=\"$class\">". array_pop($bc) .'</span>';
  } else {
    return '<div>'. implode(' &gt; ', $bc) .'</div>';
  }
}

/**
 * Translate function for taxonomy.
 * Uses tt() when available.
 */
function nsmi_dir_tt($term) {
  if (module_exists('i18nstrings')) {
    return tt("taxonomy:term:{$term->tid}:name", $term->name, NULL, TRUE);
  }

  return t($term->name);
}