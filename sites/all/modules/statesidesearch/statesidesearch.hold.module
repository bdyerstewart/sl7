<?php
// $Id$
/**
* @file
* Custom search module
*
* This module provides user data questions and assembles search from 
 * several components: Featured Returns, NSMI Matches, node and attachment searches
 * The display is in a accordianed list by Featured and Additional results with pager
*/
/**
* Implements hook_help().
*/
include 'statesidesearch.extender.inc';
function statesidesearch_init(){
  if (!isset($_SESSION['statesidesearch_total'])) { $_SESSION['statesidesearch_total'] = array() ;	}
  if (!isset($_SESSION['times_thru'])) { 
        $_SESSION['times_thru'] = array() ; 
        $_SESSION['times_thru'][0] = 0;
  }
  
  drupal_add_css(drupal_get_path('module', 'statesidesearch') . 'statesidesearch.css', 
                  array('group' => CSS_DEFAULT, 'every_page' => TRUE));
}

function statesidesearch_permission() {
  return array(
    'access stateside search' => array('title'=> t('access stateside search'),),
    'access stateside search userdata report' => array('title' => t('access stateside search userdata report'),)
  );
} 

function statesidesearch_menu() {
  $items = array();
  $items['sl_search/%'] = array(
    'title' => 'Search Results',
    'description' => 'Search Results',
    'access arguments' => array('access stateside search'),
    'page callback' => 'statesidesearch_page',
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['statesidesearchfull/%'] = array(
    'title' => 'Search Results',
    'description' => 'Additional Search Results',
    'access arguments' => array('access stateside search'),
    'page callback' => 'statesidesearch_pagefull',
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/statesidesearchresults'] = array(
    'title' => 'Search Analysis',
    'description' => 'Filterable Search Keyword Analysis',
    'page callback' => 'statesidesearch_results_info',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

function statesidesearch_help($path, $arg) {
  if ($path == 'admin/help#statesidesearch') {
    return t('Custom Search Module');
  }
}

function statesidesearch_schema_alter(&$schema) {
  // Change index of field_related 
  $fields = array('entity_type','entity_id','deleted','delta','language','field_related_tid',);
  db_drop_primary_key('field_data_field_related');
  db_add_primary_key('field_data_field_related', $fields);
  db_drop_primary_key('field_revision_field_related');
  db_add_primary_key('field_revision_field_related', $fields);
    
}
function statesidesearch_cron() {
    
    // Update term_synonyms with any missing nsmi tag names
    $sql = "INSERT INTO {field_data_synonyms_synonym} 
              (entity_type, bundle, entity_id, revision_id, language, delta, synonyms_synonym_value )
              SELECT 'taxonomy_term' as entity_type, 
              'nsmi' as bundle,
              tid as entity_id,
              tid as revision_id,
              'und' as language,
              0 as delta,
              name as synonyms_synonym_value
              FROM {taxonomy_term_data} td
              WHERE vid in
                (select vid from {taxonomy_vocabulary} where name = 'nsmi')
              AND NOT name IN
              (SELECT synonyms_synonym_value
                FROM {field_data_synonyms_synonym} ts
                where ts.entity_id = td.tid)";
    db_query($sql);

    $sql = "INSERT INTO {field_revision_synonyms_synonym} 
              (entity_type, bundle, entity_id, revision_id, language, delta, synonyms_synonym_value )
              SELECT 'taxonomy_term' as entity_type, 
              'nsmi' as bundle,
              tid as entity_id,
              tid as revision_id,
              'und' as language,
              0 as delta,
              name as synonyms_synonym_value
              FROM {taxonomy_term_data} td
              WHERE vid in
                (select vid from {taxonomy_vocabulary} where name = 'nsmi')
              AND NOT name IN
              (SELECT synonyms_synonym_value
                FROM {field_revision_synonyms_synonym} ts
                where ts.entity_id = td.tid)";
    db_query($sql);

}

function statesidesearch_url_outbound_alter(&$path, &$options, $original_path) {
  // Change all requests for 'search/node/x' to 'statesidesearch/x'.
  
  if (preg_match('|^search/node(/.*)|', $path, $matches)) {
      $path = 'sl_search/'. $matches[1];
      return;
    }
  if (preg_match('|^search/statesidesearch(/.*)|', $path, $matches)) {
      $path = 'sl_search/'. $matches[1];
      return;
    }
  if (preg_match('|^search|', $path, $matches)) {
      $mysearchterm = $matches[1];
      if ($mysearchterm){}
      else {$mysearchterm = 'help';}
      $path = 'sl_search/'. $mysearchterm;
    }
}

function stateside_user_filter($form_state) {
  $form = array();
  if (!isset($_SESSION['stateside_user_dates'])) { $_SESSION['stateside_user_dates'] = array() ;	}
  $session = $_SESSION['stateside_user_dates'];
  if (!empty($session[0])){
   
  }
  else {
//    $session[0] = date("Y-m-d H:i:s",mktime(0,0,0,10,26,2010));
      $session[0] = 0;
      $_SESSION['stateside_user_dates'][0] = $session[0];
  }

  if (!empty($session[1])){
   
  }
  else {
    $session[1] = date("Y-m-d H:i:s");
    $_SESSION['stateside_user_dates'][1] = $session[1];
  }
  $sdate = $session[0];
  $edate = $session[1];

  $form['filter'] = array(
  '#type' => 'fieldset',
  '#title' => t('Filter by date range'),
  '#prefix' => '<div class="date_inline">',
  '#suffix' => '</div">',
   );
  
  $form['filter']['start'] = array(
  '#type' => 'date_popup',
  '#title' => t('Start'),
  '#default_value' => $sdate,
  '#date_format' => 'Y-m-d',
  '#date_year_range' => '-100:+0',
  );
  
  $form['filter']['end'] = array(
  '#type' => 'date_popup',
  '#title' => t('End'),
  '#default_value' => $edate,
  '#date_format' => 'Y-m-d',
  '#date_year_range' => '-100:+0',
  );

  $form['filter']['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  
  $form['filter']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
  );

  return $form;
}

function stateside_user_filter_validate($form, $form_state) {

}

function stateside_user_filter_submit($form, &$form_state) {
  /*
   * Store form info into session variables
   */
    $op = $form_state['values']['op'];
    switch ($op) {
      case t('Filter'):
        $dstart = $form_state['values']['start'];
        $dend = $form_state['values']['end'] ;
        break;
      case t('Reset'):
        $dstart = date("Y-m-d H:i:s",mktime(0,0,0,10,26,2010));
        $dend = date("Y-m-d H:i:s");
        break;
    }
    $_SESSION['stateside_user_dates'][0] = $dstart;
    $_SESSION['stateside_user_dates'][1] = $dend;
    return 'admin/reports/statesidesearchresults' ;
  }

function statesidesearch_results_info(){
  $form = drupal_get_form('stateside_user_filter');
  $out = drupal_render($form);
  $dmystart = strtotime($_SESSION['stateside_user_dates'][0]);
  $dmyend = strtotime($_SESSION['stateside_user_dates'][1]);
  drupal_add_css(drupal_get_path('module', 'statesidesearch') .'/statesidesearch.css');
  
  $headers = array(
         array('data' => t('Search Phrase&nbsp;&nbsp;'), 'field' => 'term'),
         array('data' => t('Times Sought&nbsp;&nbsp;'), 'field' => 'counter', 'sort' => 'desc'),
         array('data' => t('Current # <br />Promotions&nbsp;&nbsp;'), 'field' => 'promotions'),
         array('data' => t('Tagged # <br />Results&nbsp;&nbsp;'), 'field' => 'tagged'),
         array('data' => t('Other # <br />Returns&nbsp;&nbsp;'), 'field' => 'returns'),
         );
    $select = db_select('statesidesearch', 'h')->extend('PagerDefault');
    $select->limit(10);
    $select->extend('TableSort')->orderByHeader($headers);
    $select->leftjoin('statesidesearch_data','t','t.term = h.term');
    $select->addField('h','term');
    $select->addExpression('COUNT(h.term)', 'counter');
    $select->addField('t','promotions');
    $select->addField('t','tagged');
    $select->addField('t', 'returns');
    $select->condition('h.date',array($dmystart,$dmyend),'BETWEEN');
    
    $select->groupBy('h.term');
    $results = $select->execute();

    $out .= "<div><h2>Search Summary</h2>";
    $link = '<a rel="nofollow" class="print-page" title="Display a printer-friendly version of this page."
          href="/print/admin/reports/statesidesearchresults"><img width="16" height="16" class="print-icon print-icon-margin"
          title="Printer-friendly version" alt="Printer-friendly version"
          src="/sites/all/modules/print/icons/print_icon.gif"/>Printer-friendly version</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
    $out .= "<div align='center'>$link</div>" ;
    $rows = array();
    foreach ($results as $result) {
      $spacer = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
      $rows[] = array(
        t($result->term),
        $spacer.$result->counter,
        $spacer.$result->promotions,
        $spacer.$result->tagged,
        $spacer.$result->returns
        );
    }
//    $out .= theme('table',$headers,$rows);
    $out .= theme('table', array(
                'header' => $headers,
                'rows' => $rows,
                'attributes' => array('class' => array('statesidetable'))
            ));
    $out .= "</div>";
    $out .= theme('pager', array('tags' => array()));
    return $out;
}

function statesidesearch_page($keys){
  if ($keys=='sites'){return"";}
  $is_advocate = $_SESSION['is_advocate'][0];
  drupal_add_js(array('mylawsearch' => $keys), 'setting');
  global $user;
  global $base_url;
  $results = array();
  if ($is_advocate){
    $searchtypes = array('military','resource','page', 'advocatelink','advocateresource','jimsmailbag','tax_mailbag','blog');
  }
  else {
    $searchtypes = array('military','resource','page','jimsmailbag');
  }
  $total = 1;
  $promocount = 0;
  $tagcount = 0;
  $drupalsearchcount = 0;
  $searchcount = 0;
  $mylimit = 10;
  $promo_limit = 0;
  $tag_limit = 0;
  $drp_limit = 0;
  $output = '';
  
  $is_advocate = $_SESSION['is_advocate'][0];
  $form = drupal_get_form("statesidelegal_advocate");
  $output .= '<div id="advocate-search"><div id="statesidelegal-button-title" style="margin-top: 15px;">Include Advocate Articles </div>' 
                . drupal_render($form) . "</div>";

  $promo_output = '';
  $tagged_output = '';
  $drupal_output = '';
  $file_output = '';
  $sids = array();
  $sids[] = 0;
  
  // Get array of cleaned up keywords
  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('statesidesearchQuery');
  $query->SearchExpression($keys,'statesidesearch');
  $query->parseSearchExpression();
  $mywords = $query->words;
  $db_or = db_or();
  $subquery = db_select('field_data_synonyms_synonym','s');
  $subquery->addField('s','entity_id','tid');
  $subquery->condition('s.synonyms_synonym_value',$keys);
  $findterm = $subquery->countQuery()->execute()->fetchField();
  if(! $findterm){
    // Get a reference to current conditions
    $conditions =& $subquery->conditions();
    // Reset the condition array. It needs a default #conjunction for which AND is fine
    $conditions = array('#conjunction' => 'AND');
    $db_or->condition('s.synonyms_synonym_value',$keys);
    foreach($mywords as $word){
      $db_or->condition('s.synonyms_synonym_value', $word , 'LIKE');
    }
    $subquery->condition($db_or);
  }
  $promoquery = db_select('field_data_field_sendtotop','p');
  $promoquery->addField('p','entity_id','sid');
  $promoquery->addExpression(0,"score");
  $promoquery->addExpression("'promo'","type");
  $promoquery->addExpression(0,"calculated_score");
  $promoquery->addExpression("'promo'","word");
  $promoquery->join('node','n','n.nid = p.entity_id');
  $promoquery->join('field_data_taxonomy_vocabulary_13','t','n.nid = t.entity_id');
  $promoquery
    ->condition('p.bundle',$searchtypes,'IN')
    ->condition('p.field_sendtotop_value',1,'=')
    ->condition('n.status',1,'=')
    ->condition('t.taxonomy_vocabulary_13_tid',$subquery,'IN')
    ->orderBy('n.sticky','DESC')
    ->groupBy('p.entity_id');
  $statesidesearchPromofind = $promoquery->execute();
  $promocount = $statesidesearchPromofind->rowCount();
  if ($promocount>0){
    $promo_output = statesidesearch_searchoutput($statesidesearchPromofind, "promo", $keys, $sids, TRUE, $promo_limit);
    $promo_output .= "</div>";
  }
  $tquery = db_select('field_data_taxonomy_vocabulary_20','tg');
  $tquery->addField('tg','taxonomy_vocabulary_20_tid','tid');
  $tquery->join('taxonomy_term_data','td','td.tid = tg.taxonomy_vocabulary_20_tid');
  $tquery->condition('td.name',$keys);
  $findtterm = $tquery->countQuery()->execute()->fetchField();
  if(! $findtterm){
    $db_or2 = db_or();
    // Get a reference to current conditions
    $conditions =& $tquery->conditions();
    // Reset the condition array. It needs a default #conjunction for which AND is fine
    $conditions = array('#conjunction' => 'AND');
    $db_or2->condition('td.name',$keys);
    foreach($mywords as $word){
      $db_or2->condition('td.name', $word , 'LIKE');
    }
    $tquery->condition($db_or2);
  }
  $tagquery = db_select('field_data_taxonomy_vocabulary_20', 't');
  $tagquery->addField('t','entity_id','sid');
  $tagquery->addExpression(0,"score");
  $tagquery->addExpression("'promo'","type");
  $tagquery->addExpression(0,"calculated_score");
  $tagquery->addExpression("'promo'","word");
  $tagquery->join('node','n','n.nid = t.entity_id');
  $tagquery
    ->condition('t.bundle',$searchtypes,'IN')
    ->condition('n.status',1,'=')
    ->condition('t.taxonomy_vocabulary_20_tid',$tquery,'IN')
    ->condition('t.entity_id',$sids,'NOT IN')
    ->orderBy('n.sticky','DESC')
    ->groupBy('t.entity_id');
  
  if($promocount>= $mylimit){$newlimit = 0;}else{$newlimit = $mylimit - $promocount;}
  $statesidesearchTagfind = $tagquery->execute();
  $tagcount = $statesidesearchTagfind->rowCount();
  if ($tagcount>0){
    $tagged_output .= statesidesearch_searchoutput($statesidesearchTagfind, "drupal", $keys, $sids, true, $tag_limit);  
    //$tagged_output .= "</div>";
  }
  // Do Drupal Node Search
  $my_sql = "CREATE TEMPORARY TABLE bds_drupal (
        score float,
        sid int(10),
        word varchar(50),
        type varchar(16),
        calculated_score double)";
  db_query($my_sql);

  $drpquery = db_select('search_index', 'i', array('target' => 'slave'))->extend('statesidesearchQuery')->extend('PagerDefault');
  $drpquery->addField('i','score');
  $drpquery->join('node', 'n', 'n.nid = i.sid');
  $drpquery
    ->condition('n.status', 1)
    ->condition('n.type',$searchtypes)
    ->condition('i.sid',$sids,'NOT IN')   
    ->addTag('node_access')
    ->SearchExpression($keys, 'node');
  
  // Insert special keywords.
  $drpquery->setOption('type', 'n.type');
  $drpquery->setOption('language', 'n.language');
  if ($drpquery->setOption('term', 'ti.tid')) {
    $drpquery->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
  }
  // Only continue if the first pass query matches.
  if ($drpquery->executeFirstPass()) {

    _node_rankings($drpquery);
    $drpquery
        ->orderBy('n.sticky','DESC')
        ->groupBy('i.sid');
    $drupalsearchcount = $drpquery->countQuery()->execute()->fetchField();
    
    $statesidesearchDrupalfind = $drpquery->execute();
    if ($drupalsearchcount > 0){
      $my_sql = "INSERT INTO bds_drupal " . dpq2($drpquery,true) ;
      db_query($my_sql);
    }
  }

  $filequery = db_select('search_api_db_node_attachments_upload','fl');
  $filequery->addField('fl','score');
  $filequery->addExpression("'attachment'","type");
  $filequery->addField('fl','item_id','sid');
  $filequery->join('node', 'n', 'n.nid = fl.item_id');
  $filequery->join('search_total', 't', 't.word = fl.word');
  $filequery
    ->condition('n.status', 1)
    ->condition('n.type',$searchtypes);
  $db_and = db_and();
  $k = 0;
  foreach($mywords as $word){
    $k++;
    $fld = "q".$k;
    ${$fld} = db_select('search_api_db_node_attachments_upload','fl'.$k);
    ${$fld}->addField('fl'.$k, "item_id");
    ${$fld}->condition('fl'.$k.'.word', $word,"LIKE");
    $db_and->condition('fl.item_id',${$fld},'IN');
  }
  
  $db_or2 = db_or();
  // Get a reference to current conditions
  $conditions =& $filequery->conditions();
  // Reset the condition array. It needs a default #conjunction for which AND is fine
  $conditions = array('#conjunction' => 'AND');
  $db_or2->condition('fl.word',$keys);
  foreach($mywords as $word){
      $db_or2->condition('fl.word', $word , 'LIKE');
  }
  $filequery->condition($db_or2);
  $filequery->condition($db_and);
  $filequery
    ->condition('n.status', 1)
    ->condition('n.type',$searchtypes);

  $normquery = clone $filequery;
  $normquery->addExpression("SUM(fl.score * t.count)", "wordscore");
  $normalize = $normquery->countQuery()->execute()->fetchField();
  if ($normalize == 0){
    $expr = ' SUM(fl.score * t.count)';
  }
  else {
      $expr = (1000.0 / $normalize) . ' * SUM(fl.score * t.count)';
  }

  $filequery->addField('fl','word');
  $filequery->addExpression($expr, "calculated_score");
  $filequery->groupBy("fl.item_id");
  $filequery->orderBy('calculated_score','DESC');
  $findfilecount = $filequery->countQuery()->execute()->fetchField();
  if ($findfilecount>0){
    $my_sql = "INSERT INTO bds_drupal " . dpq2($filequery,true) ;
    db_query($my_sql);
    
  }
  $sql = "update bds_drupal 
            set calculated_score = (calculated_score*5)
            where sid in 
                (select nid from node where type = 'blog')";
  db_query($sql);
  $drupal_limit = 10 - $tagcount;
  $filesearchfind = db_query("SELECT * FROM bds_drupal GROUP BY sid ORDER BY calculated_score DESC LIMIT " . $drupal_limit);
  $sql = "create table if not exists bdss SELECT * FROM bds_drupal";
  db_query($sql);
  $istrue = false;
  if ($tagcount==0){$istrue = true;}
  $srchtyp = "drupal";
  if ($promocount==0){$srchtyp = "only";}
  $drupal_output .= statesidesearch_searchoutput($filesearchfind, $srchtyp, $keys, $sids, $istrue);
  if($drupalsearchcount + $findfilecount + $tagcount> 10){
      $drupal_output .= "<div id='more-results'>
           <a class='ask-button' href='".$base_url."/statesidesearchfull/".$keys."'>Complete Additional Results</a></div>";
  }
  $totalcount = $promocount+$tagcount+$drupalsearchcount+$findfilecount;

  //update statesidesearches_data to show number of unpromoted returns for this key
  $statesidesearch_id = db_query("select qid from {statesidesearch_data} where term = :term", array(':term' => $keys ))->fetchField();
  if(! $statesidesearch_id){
        $statesidesearch_id = db_insert("statesidesearch_data")
            ->fields(array(
                'term' => $keys,
                'counter' => 0,))
            ->execute();
  }
  db_update('statesidesearch_data')
    ->fields(array(
        'promotions' => $promocount,
        'tagged'=>$tagcount,
        'returns' => $drupalsearchcount+$findfilecount,))
    ->expression('counter', 'counter + :counter', array(':counter' => 1))
    ->condition('qid', $statesidesearch_id, '=')
    ->execute();
  db_insert("statesidesearch")
        ->fields(array(
            'term' => $keys,
            'date' => time()))
        ->execute();

  if($totalcount == 0){
      $output .= "<div id='no_stateside_results'>";
      $output .= '<p><h2>No search results were found for <em>' . $keys . '</em></h2></p>';
      $output .= "<p style='padding-left:30px;'>Please try another search<br /> 
                        or check our <a href='".$base_url."/topics'>library</a></p>";
      $output .= "</div>";
  }
  else {
    $output .= "<div id='sl_searchresults' >". $promo_output .  $tagged_output . $drupal_output . "</div></div>" ;
  }
  return $output;
}

function statesidesearch_searchoutput($find, $displaytype, $keys, &$sids, $addhead = TRUE, $limitshow=0){
  global $user;
  $output = '';
  $results = array();
  $runcount = 0;
  foreach ($find as $item) {
    $curl = "";
    $runcount = $runcount + 1;
    if($limitshow>0 and $runcount>$limitshow){break;}
    if($displaytype=='related'){$iscore = 1;}
    else{$iscore=$item->score;}
    // Adjust page title to show term searched for 
    $sids[] = $item->sid ;
    $pic = "";
    $total = 1;
    $multiplier = 1;
//    $node = node_load($item->sid,$item->sid);
    $node = node_load($item->sid);
    if (!isset($node->title) || $node->title == ""){continue;}
    $sql = "SELECT filename, uri, filemime FROM file_managed 
            WHERE fid IN 
                (SELECT upload_fid from field_data_upload 
                    WHERE entity_id = " . $node->nid . ") LIMIT 1";
    $node_file = db_query($sql)->fetchField();
    $file_mime = db_query($sql)->fetchField(2);
    if (isset($node->field_url)){
        $curl = $node->field_url['und'][0]['safe_value'];
    }
    if ($node->type =="jimsmailbag"){$multiplier = 0.1;}
    if ( $iscore == 0) {
        if ($multiplier > 1) {
            $item->score = $multiplier ;
        }
    }
    $extra = '';
    if ($curl>"") {
      $myurl = $curl ; 
      $pic = "/images/globe.png";
    }
    else {
      $myurl = 'node/'. $item->sid ; 
      $pic="/images/ours.png";
    }
    if ($node->type=="military" || $node->type=="advocatelink" || $node->type=="blog"){
        if ($node_file AND $displaytype=='drupal'){
            switch ($file_mime){
                case 'application/pdf':
                    $pic = "/images/pdf.png";
                    $myurl = "sites/default/files/" . $node_file;
                    break;
                case 'application/msword':
                    $pic = "/images/word.jpg";
                    $myurl = "sites/default/files/" . $node_file;
                    break;
                case 'application/vnd.ms-powerpoint':
                    $pic = "/images/ppt.jpg";
                    $myurl = "sites/default/files/" . $node_file;
                    break;
            }
        }
    }
    if ($node->type =="jimsmailbag"){$pic = "/images/mail.gif";}
    if (in_array('administrator', $user->roles) ) {
        $myurl = 'node/'. $item->sid ;
    }
    $extra = '';
    $results[] = array(
        'link' => url($myurl),
         'type' => $node->type,
         'title' => $node->title,
         'user' => '',
         'date' => $node->changed,
         'node' => $node,
         'extra' => $extra,
         'score' => ( $iscore * $multiplier) ,
         'snippet' => search_excerpt($keys, $node->body['und'][0]['value']),
         'display' => $displaytype,
         'pict' => $pic 
    );
  }   
  if(count($results)==0){return "";}
  switch($displaytype){
      case 'promo':
          $headline = 'Featured Resources for <em>' . $keys . '</em>';
          break;
      case 'only':
          $headline = 'These resources reference <em>' . $keys . '</em>';
          break;
      case 'drupal':
          $headline = 'These additional resources reference <em>' . $keys . '</em>';
          break;
  }
  $showid = $displaytype . 'results';
  $showh2 = $displaytype . 'head';
  if($addhead){
    $output .= "<h2 id='" . $showh2 . "' class='searchaccordian'>$headline</h2>" ;
    $output .= "<div id='" . $showid . "' >" ;
  }
  foreach ($results as $mr) {
    $caddpic = "";
    if ( $mr['pict'] > "") {
        $caddpic = '<img src="' . base_path() .
                drupal_get_path('module', 'statesidesearch') . $mr['pict'] . '" />' ;
    }
    if ($mr['type']=='advocateresource' || $mr['type']=='advocatelink' || $mr['type']=='blog'){
        $output .= "<div class='advocate searchresults'>";
    }
    else {
        $output .= "<div class='searchresults'>";
    }
    $output .= '<dt class="title-promo">' ;
    $output .= $caddpic . " " .'<a href="' . $mr['link'] . '">' .  $mr['title'] . '</a>' ;
    $output .= '</dt>' ;
    $output .= '<dd>' ;
    if ( $mr['extra'] ) {
         $output .=  $mr['extra'] . '<br />';
    }
    if ( $mr['snippet'] ) {
        $output .= $mr['snippet'] ;
        $output .=  '<br />';
    }
    else {$output .= '<br />';}
    $output .= '</dd>' ;
    $output .= "</div>";
  }
  return $output; 
  
}

function statesidesearch_pagefull($keys){
  $is_advocate = $_SESSION['is_advocate'][0];
  $sids = array();
  $sids[] = 0;
  
  // Get array of cleaned up keywords
  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('statesidesearchQuery');
  $query->SearchExpression($keys,'statesidesearch');
  $query->parseSearchExpression();
  $mywords = $query->words;
  if ($is_advocate){
    $searchtypes = array('military','resource','page', 'advocatelink','advocateresource','jimsmailbag','tax_mailbag','blog');
  }
  else {
    $searchtypes = array('military','resource','page','jimsmailbag');
  }
  $my_sql = "CREATE TEMPORARY TABLE bds_drupal (
        score float,
        sid int(10),
        word varchar(50),
        type varchar(16),
        calculated_score double)";
  db_query($my_sql);

  $drpquery = db_select('search_index', 'i', array('target' => 'slave'))->extend('statesidesearchQuery')->extend('PagerDefault');
  $drpquery->addField('i','score');
  $drpquery->join('node', 'n', 'n.nid = i.sid');
  $drpquery
    ->condition('n.status', 1)
    ->condition('n.type',$searchtypes)
    ->addTag('node_access')
    ->SearchExpression($keys, 'node');
  
  // Insert special keywords.
  $drpquery->setOption('type', 'n.type');
  $drpquery->setOption('language', 'n.language');
  if ($drpquery->setOption('term', 'ti.tid')) {
    $drpquery->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
  }
  // Only continue if the first pass query matches.
  if ($drpquery->executeFirstPass()) {

    _node_rankings($drpquery);
    $drpquery
        ->orderBy('n.sticky','DESC')
        ->groupBy('i.sid');
    $drupalsearchcount = $drpquery->countQuery()->execute()->fetchField();
    
    $statesidesearchDrupalfind = $drpquery->execute();
    if ($drupalsearchcount > 0){
      $my_sql = "INSERT INTO bds_drupal " . dpq2($drpquery,true) ;
      db_query($my_sql);
    }
  }
  
  

  $filequery = db_select('search_api_db_node_attachments_upload','fl');
  $filequery->addField('fl','score');
  $filequery->addExpression("'attachment'","type");
  $filequery->addField('fl','item_id','sid');
  $filequery->join('node', 'n', 'n.nid = fl.item_id');
  $filequery->join('search_total', 't', 't.word = fl.word');
  $filequery
    ->condition('n.status', 1)
    ->condition('n.type',$searchtypes);
  $db_and = db_and();
  $k = 0;
  foreach($mywords as $word){
    $k++;
    $fld = "q".$k;
    ${$fld} = db_select('search_api_db_node_attachments_upload','fl'.$k);
    ${$fld}->addField('fl'.$k, "item_id");
    ${$fld}->condition('fl'.$k.'.word', $word,"LIKE");
    $db_and->condition('fl.item_id',${$fld},'IN');
  }
  
  
  $findfilecount = $filequery->countQuery()->execute()->fetchField();
  $db_or2 = db_or();
  // Get a reference to current conditions
  $conditions =& $filequery->conditions();
  // Reset the condition array. It needs a default #conjunction for which AND is fine
  $conditions = array('#conjunction' => 'AND');
  $db_or2->condition('fl.word',$keys);
  foreach($mywords as $word){
      $db_or2->condition('fl.word', $word , 'LIKE');
  }
  $filequery->condition($db_or2);
  $filequery->condition($db_and);
  $filequery
    ->condition('n.status', 1)
    ->condition('n.type',$searchtypes);

  $normquery = clone $filequery;
  $normquery->addExpression("SUM(fl.score * t.count)", "wordscore");
  $normalize = $normquery->countQuery()->execute()->fetchField();
  if ($normalize == 0){
    $expr = ' SUM(fl.score * t.count)';
  }
  else {
      $expr = (1000.0 / $normalize) . ' * SUM(fl.score * t.count)';
  }

  $filequery->addField('fl','word');
  $filequery->addExpression($expr, "calculated_score");
  $filequery->groupBy("fl.item_id");
  $filequery->orderBy('calculated_score','DESC');

  if ($findfilecount>0){
    $my_sql = "INSERT INTO bds_drupal " . dpq2($filequery,true) ;
    db_query($my_sql);
    
  }
    
    $query = db_select("bds_drupal","b")->extend('PagerDefault');    
    $query->fields('b');
    $query
        ->groupBy("sid")
        ->orderBy("calculated_score");
    $filesearchfind = $query->execute();
    $output = "<div id='full_results'>";
    $output .= '<p><h4>Complete text and file search results for <em>' . $keys . '</em></h4></p></div>';
    $output .= statesidesearch_searchoutput($filesearchfind, "drupal", $keys, $sids, $istrue);
    $output .= "</div>";
  // Return the output with the pager attached to it.  The pager
  // is the box underneath the table that allows people to jump
  // to the next page.
  $output .= theme('pager', array('tags' => array()));
  return $output;
}

function statesidesearch_keyform($form, &$form_state)  {
  //$form_default = t('Enter keyword or phrase');
  $form['statesidesearch_key'] = array(
      '#title' => t('Search Box'), 
      '#attributes' => array('class' => array('no-mobile')),
  );
  $form['statesidesearch_key']['statesidesearch_term'] = array(
      '#type' => 'textfield',
      '#size' => 50,
      '#attributes' => array(
              'placeholder' => t('Enter keyword or phrase')),
  );
  $form['statesidesearch_key']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 19,
  );    
  return $form;
}

function statesidesearch_keyform_validate($form, $form_state) {
}
function statesidesearch_keyform_submit($form, &$form_state){
  $stateside_key = search_simplify($form_state['values']['statesidesearch_term']);
  if ($stateside_key=='sites'){return false;}
  if (strtolower($stateside_key)=='enter keyword or phrase'){return false;}
  $form_state['redirect'] = 'sl_search/' . $stateside_key;
}

function statesidesearch_block_info() {
  $blocks['statesidesearch'] = array(
    'info' => t('Stateside Search Filter'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['statesidesearch_search'] = array(
    'info' => t('Stateside Search Box'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['statesidesearch_sidebar_search'] = array(
    'info' => t('Stateside Sidebar Search Box'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['statesidesearch_advocate_search'] = array(
    'info' => t('Stateside Advocate Search Box'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['statesidesearch_mobile_search'] = array(
    'info' => t('Stateside Mobile Search Box'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}  

function statesidesearch_block_view($delta = '') {
  global $base_url;
  switch($delta){
    case 'statesidesearch_search':
      $form = drupal_get_form("statesidesearch_keyform");
      $ctext = drupal_render($form);
      $ctext = "<div id='searchbar'><h3>Need Legal Help?</h3>" . $ctext . "</div>";
      $block['subject'] = '';
      $block['content'] = $ctext;
      return $block;
    case 'statesidesearch_sidebar_search':
      $form = drupal_get_form("statesidesearch_keyform");
      $ctext = drupal_render($form);
      $ctext = "<div id='side-searchbar'><h3>Need Legal Help?</h3>" . 
                    $ctext . '<a class="browse" href="'.$base_url.'/topics"> Or Browse by Topic </a></div>';
      $block['subject'] = '';
      $block['content'] = $ctext;
      return $block;
    case 'statesidesearch_mobile_search':
      $form = drupal_get_form("statesidesearch_keyform");
      $ctext = drupal_render($form);
      $ctext = "<div id='mobile-searchbar'>" . $ctext . "</div>";
      $block['subject'] = '';
      $block['content'] = $ctext;
    case 'statesidesearch_advocate_search':
      $form = drupal_get_form("statesidesearch_keyform");
      $ctext = drupal_render($form);
      $ctext = "<div id='advocate-searchbar'><h4>Search Advocate Resources</h4>" . $ctext . "</div>";
      $block['subject'] = '';
      $block['content'] = $ctext;
      return $block;
    }

    
}   
function dpq2($query, $return = FALSE, $name = NULL) {
    $query->preExecute();
    $sql = (string) $query;
    $quoted = array();
    $connection = Database::getConnection();
    foreach ((array)$query->arguments() as $key => $val) {
      $quoted[$key] = $connection->quote($val);
    }
    $sql = strtr($sql, $quoted);
    if ($return) {
      return $sql;
    }
    dpm($sql, $name);
  return ($return ? NULL : $query);
}